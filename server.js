import { WebSocketServer } from "ws";
import http from "http";
import { Chess } from "chess.js";

const PORT = 4000;
const rooms = {};

const server = http.createServer();
const wss = new WebSocketServer({ server });

console.log(`üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);

wss.on("connection", (ws, req) => {
  try {
    const url = new URL(req.url, `http://${req.headers.host}`);
    const roomId = url.searchParams.get("roomId");
    const playerId = url.searchParams.get("playerId");
    const preferredColor = url.searchParams.get("preferredColor");

    if (!roomId || !playerId) {
      console.warn("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç roomId –∏–ª–∏ playerId.");
      ws.send(JSON.stringify({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" }));
      ws.close();
      return;
    }

    if (!rooms[roomId]) {
      rooms[roomId] = {
        game: new Chess(),
        players: {},
        moveHistory: [],
        clients: new Set(),
        gameStarted: false,
        creatorPreference: preferredColor || 'random'
      };
    }

    const room = rooms[roomId];
    room.clients.add(ws);

    if (!room.players.white && !room.players.black) {
      if (room.creatorPreference === 'white') {
        room.players.white = playerId;
      } else if (room.creatorPreference === 'black') {
        room.players.black = playerId;
      } else {
        if (Math.random() < 0.5) {
          room.players.white = playerId;
        } else {
          room.players.black = playerId;
        }
      }
    } else {
      if (!room.players.white) {
        room.players.white = playerId;
      } else if (!room.players.black) {
        room.players.black = playerId;
      }
      room.gameStarted = true;
    }

    const assignedColor =
      room.players.white === playerId
        ? "white"
        : room.players.black === playerId
        ? "black"
        : "spectator";

    console.log(`üü¢ –ò–≥—Ä–æ–∫ ${playerId} (${assignedColor}) –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞
    const opponentConnected = !!room.players.white && !!room.players.black;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –µ–≥–æ —Ü–≤–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    ws.send(
      JSON.stringify({
        type: "init",
        moves: room.moveHistory,
        color: assignedColor,
        opponentConnected,
        gameStarted: room.gameStarted,
        playerId,
      })
    );

    // –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è, –æ–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    if (opponentConnected && room.gameStarted) {
      room.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(JSON.stringify({ 
            type: "game_started",
            whitePlayer: room.players.white,
            blackPlayer: room.players.black
          }));
        }
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ö–æ–¥—ã –æ—Ç –∏–≥—Ä–æ–∫–æ–≤
    ws.on("message", (message) => {
      try {
        const data = JSON.parse(message.toString());

        if (data.type === "move") {
          if (assignedColor === "spectator") {
            console.warn(`‚ùå –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å ${playerId} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥!`);
            return;
          }

          const currentTurn = room.game.turn() === "w" ? "white" : "black";

          if (room.players[currentTurn] !== playerId) {
            console.warn(`‚ùå –ò–≥—Ä–æ–∫ ${playerId} (${assignedColor}) –ø—ã—Ç–∞–µ—Ç—Å—è —Ö–æ–¥–∏—Ç—å –Ω–µ –≤ —Å–≤–æ–π —Ö–æ–¥!`);
            return;
          }

          const moveResult = room.game.move(data.move);
          if (!moveResult) {
            console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥ –æ—Ç ${playerId}:`, data.move);
            return;
          }

          room.moveHistory.push(data.move);
          console.log(`‚ôüÔ∏è –ü—Ä–∏–Ω—è—Ç —Ö–æ–¥ ${data.move.from} ‚Üí ${data.move.to}`);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –í–°–ï–ú –∏–≥—Ä–æ–∫–∞–º, –ö–†–û–ú–ï –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
          room.clients.forEach((client) => {
            if (client !== ws && client.readyState === WebSocket.OPEN) {
              client.send(JSON.stringify({ type: "move", move: data.move }));
            }
          });
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    ws.isAlive = true;
    ws.on("pong", () => (ws.isAlive = true));

    const interval = setInterval(() => {
      room.clients.forEach((client) => {
        if (!client.isAlive) {
          console.warn("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.");
          return client.terminate();
        }
        client.isAlive = false;
        client.ping();
      });
    }, 30000);

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    ws.on("close", () => {
      console.warn(`üî¥ –ò–≥—Ä–æ–∫ ${playerId} (${assignedColor}) –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
      room.clients.delete(ws);
      clearInterval(interval);

      if (room.players.white === playerId) delete room.players.white;
      else if (room.players.black === playerId) delete room.players.black;

      if (room.clients.size === 0) {
        console.log(`üóë –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞.`);
        delete rooms[roomId];
      }
    });

    ws.on("error", (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error.message);
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
    ws.close();
  }
});

server.listen(PORT, () => {
  console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
