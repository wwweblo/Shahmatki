"use client";

import { useEffect, useState, useRef } from "react";
import { useParams, useSearchParams } from "next/navigation";
import { Chess } from "chess.js";
import { Chessboard } from "react-chessboard";
import { v4 as uuidv4 } from "uuid";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import WaitingScreen from "./waiting-screen";
import { Toaster } from "@/components/ui/sonner";
import { toast } from "sonner";
import { Badge } from "@/components/ui/badge";

export default function GamePage() {
  const params = useParams();
  const searchParams = useSearchParams();
  const roomId = params.roomId as string;
  const preferredColor = searchParams.get("preferredColor");

  const [playerId, setPlayerId] = useState<string | null>(null);
  const [game, setGame] = useState(new Chess());
  const [playerColor, setPlayerColor] = useState<"white" | "black" | null>(
    null
  );
  const [isSpectator, setIsSpectator] = useState(false);
  const [waitingForOpponent, setWaitingForOpponent] = useState(true);
  const [gameUrl, setGameUrl] = useState<string | null>(null);
  const [boardSize, setBoardSize] = useState(600); // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏
  const wsRef = useRef<WebSocket | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [gameStarted, setGameStarted] = useState(false);
  // –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
  const [isGameOverDialogOpen, setIsGameOverDialogOpen] = useState(false);
  const [gameResult, setGameResult] = useState<string | null>(null);
  const [gameResultReason, setGameResultReason] = useState<string | null>(null);
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–≤–∞–Ω—à
  const [rematchRequested, setRematchRequested] = useState(false);
  const [rematchDialogOpen, setRematchDialogOpen] = useState(false);
  const [opponentRematchRequest, setOpponentRematchRequest] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
  const showError = (message: string) => {
    toast(message);
  };

  // üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º playerId –¢–û–õ–¨–ö–û –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  useEffect(() => {
    let id = localStorage.getItem("playerId");
    if (!id) {
      id = uuidv4();
      localStorage.setItem("playerId", id);
    }
    setPlayerId(id);
  }, []);

  // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  useEffect(() => {
    if (typeof window !== "undefined") {
      setGameUrl(window.location.href);
    }
  }, []);

  // üìè –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏
  useEffect(() => {
    const updateBoardSize = () => {
      const minSize = Math.min(window.innerWidth, window.innerHeight) * 0.8;
      setBoardSize(minSize > 600 ? 600 : minSize);
    };

    updateBoardSize();
    window.addEventListener("resize", updateBoardSize);
    return () => window.removeEventListener("resize", updateBoardSize);
  }, []);

  useEffect(() => {
    if (!roomId || !playerId) return;

    const wsProtocol =
      typeof window !== "undefined" && window.location.protocol === "https:"
        ? "wss"
        : "ws";
    const wsUrl = `${wsProtocol}://${typeof window !== "undefined" ? window.location.hostname : "localhost"}:4000?roomId=${roomId}&playerId=${playerId}&preferredColor=${preferredColor}`;

    console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${wsUrl}`);

    const socket = new WebSocket(wsUrl);
    wsRef.current = socket;

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);

      if (data.error) {
        console.error("‚ùå –û—à–∏–±–∫–∞:", data.error);
        if (data.error === "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞") setIsSpectator(true);
        return;
      }

      if (data.type === "init") {
        setPlayerColor(data.color);
        setIsSpectator(data.color === "spectator");
        setGameStarted(data.gameStarted);

        if (data.opponentConnected) {
          setWaitingForOpponent(false);
        }

        setGame(() => {
          const newGame = new Chess();
          data.moves.forEach((move: string) => {
            try {
              newGame.move(move);
            } catch (error) {
              console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ö–æ–¥–∞ (init):", move, error);
            }
          });
          return newGame;
        });
      } else if (data.type === "game_started") {
        setGameStarted(true);
        setWaitingForOpponent(false);
        showError("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! ‚öîÔ∏è");
      } else if (data.type === "move") {
        setGame((prevGame) => {
          const newGame = new Chess(prevGame.fen());
          try {
            newGame.move(data.move);
            console.log("‚ôüÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω —Ö–æ–¥:", data.move);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
            checkGameOver(newGame);
          } catch (error) {
            console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data.move, error);
            return prevGame;
          }
          return newGame;
        });
      } else if (data.type === "opponent_joined") {
        setWaitingForOpponent(false);
      } else if (data.type === "game_over") {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        handleGameOver(data.result, data.reason);
      } else if (data.type === "rematch_request") {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≤–∞–Ω—à –æ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≤–∞–Ω—à");
        setOpponentRematchRequest(true);
        setRematchDialogOpen(true);
        showError("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–≤–∞–Ω—à! ‚öîÔ∏è");
      } else if (data.type === "rematch_started") {
        // –ù–æ–≤–∞—è –∏–≥—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–≤–∞–Ω—à–∞
        console.log("–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≤–∞–Ω—à");
        setIsGameOverDialogOpen(false);
        setRematchDialogOpen(false);
        setGameStarted(true);
        setRematchRequested(false);
        setOpponentRematchRequest(false);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (data.color) {
          setPlayerColor(data.color);
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
        setGame(new Chess());
        showError("–†–µ–≤–∞–Ω—à –Ω–∞—á–∞–ª—Å—è! ‚öîÔ∏è");
      } else if (data.type === "rematch_declined") {
        // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª —Ä–µ–≤–∞–Ω—à
        setRematchRequested(false);
        showError("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–≤–∞–Ω—à–∞ üò¢");
      }
    };

    return () => socket.close();
  }, [roomId, playerId, preferredColor]);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  const checkGameOver = (gameInstance: Chess) => {
    if (gameInstance.isGameOver()) {
      let result = "";
      let reason = "";

      if (gameInstance.isCheckmate()) {
        const winner = gameInstance.turn() === "w" ? "–ß–µ—Ä–Ω—ã–µ" : "–ë–µ–ª—ã–µ";
        result = `${winner} –ø–æ–±–µ–¥–∏–ª–∏`;
        reason = "–ú–∞—Ç";
      } else if (gameInstance.isDraw()) {
        result = "–ù–∏—á—å—è";
        if (gameInstance.isStalemate()) {
          reason = "–ü–∞—Ç";
        } else if (gameInstance.isThreefoldRepetition()) {
          reason = "–¢—Ä–æ–µ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏";
        } else if (gameInstance.isInsufficientMaterial()) {
          reason = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞";
        } else {
          reason = "–ü—Ä–∞–≤–∏–ª–æ 50 —Ö–æ–¥–æ–≤";
        }
      }

      handleGameOver(result, reason);
    }
  };

  const handleGameOver = (result: string, reason: string) => {
    setGameResult(result);
    setGameResultReason(reason);
    setIsGameOverDialogOpen(true);
  };

  const makeMove = (move: { from: string; to: string; promotion?: string }) => {
    if (!wsRef.current || isSpectator || game.turn() !== playerColor?.[0])
      return;

    setGame((prevGame) => {
      const newGame = new Chess(prevGame.fen());

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ –î–û –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
      try {
        const moveResult = newGame.move(move);
        if (!moveResult) {
          throw new Error("–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞
        checkGameOver(newGame);
      } catch {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥", move);
        showError("‚ùå –≠—Ç–æ—Ç —Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω!");
        return prevGame;
      }

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞:`, move);
      wsRef.current?.send(JSON.stringify({ type: "move", move }));
      return newGame;
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≤–∞–Ω—à–∞
  const requestRematch = () => {
    if (wsRef.current) {
      wsRef.current.send(JSON.stringify({ type: "rematch_request" }));
      setRematchRequested(true);
      showError("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≤–∞–Ω—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
      setIsGameOverDialogOpen(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–µ–≤–∞–Ω—à–µ
  const acceptRematch = () => {
    if (wsRef.current) {
      wsRef.current.send(JSON.stringify({ type: "rematch_accept" }));
      setRematchDialogOpen(false);
      showError("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–≤–∞–Ω—à–∞");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–µ–≤–∞–Ω—à–µ
  const declineRematch = () => {
    if (wsRef.current) {
      wsRef.current.send(JSON.stringify({ type: "rematch_decline" }));
      setRematchDialogOpen(false);
      setOpponentRematchRequest(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PGN
  const downloadPGN = () => {
    const pgn = game.pgn();
    const blob = new Blob([pgn], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `chess-game-${new Date().toISOString().slice(0, 10)}.pgn`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
  if (waitingForOpponent) {
    return <WaitingScreen />;
  }

  return (
    <div className="flex flex-col items-center h-screen">
      <div className="mb-4 text-center">
        <h1 className="text-2xl">
          {isSpectator
            ? "–í—ã –∑—Ä–∏—Ç–µ–ª—å"
            : gameStarted
              ? `–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ${playerColor === "white" ? "–±–µ–ª—ã—Ö" : "—á–µ—Ä–Ω—ã—Ö"}`
              : "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã..."}
        </h1>
        {gameStarted && (
          <Badge variant="secondary" className="px-3 py-1">
            <div className="w-2 h-2 bg-blue-300 rounded-full mr-2 animate-pulse" />
            {game.turn() === playerColor?.[0] ? "–í–∞—à —Ö–æ–¥!" : "–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"}
          </Badge>
        )}
        {opponentRematchRequest && !rematchDialogOpen && (
          <p className="text-yellow-400 mt-2">
            –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ö–æ—á–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!
          </p>
        )}
      </div>

      <div>
        <Chessboard
          position={game.fen()}
          onPieceDrop={(s, t) => {
            if (!gameStarted) {
              showError("‚ùå –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!");
              return false;
            }

            const move = { from: s, to: t, promotion: "q" };

            if (!isSpectator && game.turn() === playerColor?.[0]) {
              makeMove(move);
              return true;
            }

            showError("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
            return false;
          }}
          boardOrientation={playerColor || "white"}
          boardWidth={boardSize}
        />
      </div>

      {/* –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–≥—Ä—ã */}
      <Dialog
        open={isGameOverDialogOpen}
        onOpenChange={setIsGameOverDialogOpen}
      >
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</DialogTitle>
            <DialogDescription>
              {gameResult}: {gameResultReason}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex flex-row justify-between gap-2 sm:justify-between">
            <Button onClick={() => setIsGameOverDialogOpen(false)}>
              –ó–∞–∫—Ä—ã—Ç—å
            </Button>
            <Button onClick={downloadPGN}>–°–∫–∞—á–∞—Ç—å –ø–∞—Ä—Ç–∏—é</Button>
            <Button onClick={requestRematch} disabled={rematchRequested}>
              {rematchRequested ? "–û–∂–∏–¥–∞–Ω–∏–µ..." : "–†–µ–≤–∞–Ω—à"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Ä–µ–≤–∞–Ω—à */}
      <Dialog open={rematchDialogOpen} onOpenChange={setRematchDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≤–∞–Ω—à</DialogTitle>
            <DialogDescription>
              –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–∞—Ä—Ç–∏—é. –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex flex-row justify-between gap-2 sm:justify-between">
            <Button onClick={declineRematch} variant="outline">
              –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </Button>
            <Button onClick={acceptRematch}>–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      <Toaster />
    </div>
  );
}
